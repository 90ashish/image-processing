syntax = "proto3";

package imageproc;
option go_package = "image-proc/proto;proto";

import "google/protobuf/empty.proto";

// Service with a single unary RPC
service ImageProcessor {
    // Phase 1: Unary RPC Returns the service version
    rpc GetVersion(google.protobuf.Empty) returns (VersionResponse);

    // Phase 2: Client-streaming upload
    rpc Upload(stream UploadRequest) returns (UploadResponse);

    // Phase 3: Server-streaming processing
    rpc Process(ProcessingRequest) returns (stream ProgressUpdate);

    // Phase 4: Bidirectional “Tune”
    rpc Tune(stream TuneRequest) returns (stream TuneResponse);
}

message VersionResponse {
    string version = 1;
}

message UploadRequest{
    bytes chunk = 1;
}

message UploadResponse{
    string image_id = 1;
}

message ProcessingRequest{
    string image_id =1;             // ID returned by Upload
    repeated string filters = 2;    // e.g. ["blur","edge"]
}

message ProgressUpdate{
    int32 percent = 1;              // 0–100
    string status = 2;              // e.g. "10% complete"
}

message TuneRequest {
    string image_id = 1;    // ID of the uploaded image
    string parameter = 2;   // e.g., "brightness", "contrast"
    double value = 3;       // new value for the parameter
}

message TuneResponse {
    bytes preview_chunk = 1;    // chunk of preview image data
}