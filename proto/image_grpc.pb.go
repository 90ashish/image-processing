// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/image.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageProcessor_GetVersion_FullMethodName = "/imageproc.ImageProcessor/GetVersion"
	ImageProcessor_Upload_FullMethodName     = "/imageproc.ImageProcessor/Upload"
	ImageProcessor_Process_FullMethodName    = "/imageproc.ImageProcessor/Process"
	ImageProcessor_Tune_FullMethodName       = "/imageproc.ImageProcessor/Tune"
)

// ImageProcessorClient is the client API for ImageProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service with a single unary RPC
type ImageProcessorClient interface {
	// Phase 1: Unary RPC Returns the service version
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Phase 2: Client-streaming upload
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error)
	// Phase 3: Server-streaming processing
	Process(ctx context.Context, in *ProcessingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProgressUpdate], error)
	// Phase 4: Bidirectional “Tune”
	Tune(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TuneRequest, TuneResponse], error)
}

type imageProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewImageProcessorClient(cc grpc.ClientConnInterface) ImageProcessorClient {
	return &imageProcessorClient{cc}
}

func (c *imageProcessorClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, ImageProcessor_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessorClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageProcessor_ServiceDesc.Streams[0], ImageProcessor_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadRequest, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageProcessor_UploadClient = grpc.ClientStreamingClient[UploadRequest, UploadResponse]

func (c *imageProcessorClient) Process(ctx context.Context, in *ProcessingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProgressUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageProcessor_ServiceDesc.Streams[1], ImageProcessor_Process_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProcessingRequest, ProgressUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageProcessor_ProcessClient = grpc.ServerStreamingClient[ProgressUpdate]

func (c *imageProcessorClient) Tune(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TuneRequest, TuneResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageProcessor_ServiceDesc.Streams[2], ImageProcessor_Tune_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TuneRequest, TuneResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageProcessor_TuneClient = grpc.BidiStreamingClient[TuneRequest, TuneResponse]

// ImageProcessorServer is the server API for ImageProcessor service.
// All implementations must embed UnimplementedImageProcessorServer
// for forward compatibility.
//
// Service with a single unary RPC
type ImageProcessorServer interface {
	// Phase 1: Unary RPC Returns the service version
	GetVersion(context.Context, *emptypb.Empty) (*VersionResponse, error)
	// Phase 2: Client-streaming upload
	Upload(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error
	// Phase 3: Server-streaming processing
	Process(*ProcessingRequest, grpc.ServerStreamingServer[ProgressUpdate]) error
	// Phase 4: Bidirectional “Tune”
	Tune(grpc.BidiStreamingServer[TuneRequest, TuneResponse]) error
	mustEmbedUnimplementedImageProcessorServer()
}

// UnimplementedImageProcessorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageProcessorServer struct{}

func (UnimplementedImageProcessorServer) GetVersion(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedImageProcessorServer) Upload(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedImageProcessorServer) Process(*ProcessingRequest, grpc.ServerStreamingServer[ProgressUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedImageProcessorServer) Tune(grpc.BidiStreamingServer[TuneRequest, TuneResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Tune not implemented")
}
func (UnimplementedImageProcessorServer) mustEmbedUnimplementedImageProcessorServer() {}
func (UnimplementedImageProcessorServer) testEmbeddedByValue()                        {}

// UnsafeImageProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageProcessorServer will
// result in compilation errors.
type UnsafeImageProcessorServer interface {
	mustEmbedUnimplementedImageProcessorServer()
}

func RegisterImageProcessorServer(s grpc.ServiceRegistrar, srv ImageProcessorServer) {
	// If the following call pancis, it indicates UnimplementedImageProcessorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageProcessor_ServiceDesc, srv)
}

func _ImageProcessor_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessorServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageProcessor_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessorServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessor_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageProcessorServer).Upload(&grpc.GenericServerStream[UploadRequest, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageProcessor_UploadServer = grpc.ClientStreamingServer[UploadRequest, UploadResponse]

func _ImageProcessor_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageProcessorServer).Process(m, &grpc.GenericServerStream[ProcessingRequest, ProgressUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageProcessor_ProcessServer = grpc.ServerStreamingServer[ProgressUpdate]

func _ImageProcessor_Tune_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageProcessorServer).Tune(&grpc.GenericServerStream[TuneRequest, TuneResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageProcessor_TuneServer = grpc.BidiStreamingServer[TuneRequest, TuneResponse]

// ImageProcessor_ServiceDesc is the grpc.ServiceDesc for ImageProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imageproc.ImageProcessor",
	HandlerType: (*ImageProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _ImageProcessor_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _ImageProcessor_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Process",
			Handler:       _ImageProcessor_Process_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Tune",
			Handler:       _ImageProcessor_Tune_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/image.proto",
}
